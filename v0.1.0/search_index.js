var documenterSearchIndex = {"docs":
[{"location":"api/plt/#plt","page":"Plot function","title":"plt","text":"","category":"section"},{"location":"api/synchronization/#sychronization","page":"Synchronization","title":"sychronization","text":"","category":"section"},{"location":"api/simulation/#simulation","page":"Simulation","title":"simulation","text":"","category":"section"},{"location":"#HighOrderMRI.jl","page":"Introduction","title":"HighOrderMRI.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This is a Julia toolbox for MR simulation and reconstruction that can incorporate dynamic field changes associated with the gradients throughout the sequence. This is an extension of KomaMRI.jl (a Julia package for highly efficient MR simulations) and MRIReco.jl (a Julia package for MRI reconstruction).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For MRI image reconstruction with field dynamics, we have built an extended signal encoding operator HighOrderOp to construct the signal equation. HighOrderOp inherits from AbstractLinearOperator in LinearOperators.jl. Then, image reconstruction problem can be solved using algorithms from RegularizedLeastSquares.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you use the toolbox, please consider citing the following abstracts:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[1] Zhang, Z., Auerbach, E. J., Bratch, A., Grant, A. N., Zhuo, Y., He, S., Chen, L., Ugurbil, K., Wu, X. \"A stitching method for dynamic field monitoring using NMR probes\", 2024 ISMRM, Singapore","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[2] Zhang, J., Zuo, Z., Xue, R., Zhuo, Y., Cushing, C., Bratch, A., Auerbach, E. J., Grant, A. N., Ugurbil, K., Wu, X., Zhang, Z. \"A stitching method for dynamic field monitoring using NMR probes: validation in simulation and human experiments\", 2025 ISMRM, Hawaii","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Support up to 2nd or 3rd order spherical harmonic terms.\nSupport parrallel imaging and off-resonance correction with extended signal encoding operator HighOrderOp.\nSupport the model-based synchronization delay estimation algorithm (Dubovan PI, Baron CA. 2023, https://doi.org/10.1002/mrm.29460).\nGPU acceleration with CUDA.jl (only NVIDIA GPU has been tested). If the GPU memory is not enough, the calculation can be divided into blocks.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"#Installation-Guide","page":"Introduction","title":"Installation Guide","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"HighOrderMRI is compatible with Julia version 1.9.4. To get started with HighOrderMRI, users should first install Julia and consider using a code editor for a smoother coding experience.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To get the HighOrder package installed, execute the following Julia command:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.add(url=\"https://github.com/BennyZhang-Codes/HighOrderMRI.jl.git\")\n# or\nPkg.develop(url=\"https://github.com/BennyZhang-Codes/HighOrderMRI.jl.git\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"api/reconstruction/#reconstruction","page":"Reconstruction","title":"reconstruction","text":"","category":"section"}]
}
